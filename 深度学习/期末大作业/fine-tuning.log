2024/01/01 23:03:56 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 759224674
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.109
    GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
    PyTorch: 1.10.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.1+cu113
    OpenCV: 4.8.1
    MMEngine: 0.10.2

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 759224674
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/01/01 23:03:57 - mmengine - INFO - Config:
backend_args = None
data_root = 'data/coco_instances/'
dataset_type = 'UdtiriDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=True, interval=5, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '/root/autodl-tmp/homework/configs/mask_rcnn/best_coco_segm_mAP_epoch_112.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_mask=True,
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=1,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        mask_head=dict(
            conv_out_channels=256,
            in_channels=256,
            loss_mask=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_mask=True),
            num_classes=1,
            num_convs=4,
            type='FCNMaskHead'),
        mask_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            mask_size=28,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='MaskRCNN')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.0001, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
optimizer = dict(lr=0.0001, momentum=0.9, type='SGD', weight_decay=0.0001)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        end=20,
        gamma=0.5,
        milestones=[
            15,
            18,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_test2017.json',
        data_prefix=dict(img='test2017/'),
        data_root='data/coco_instances/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='UdtiriDataset'),
    drop_last=False,
    num_workers=20,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco_instances/annotations/instances_test2017.json',
    backend_args=None,
    format_only=True,
    metric=[
        'segm',
    ],
    outfile_prefix='./work_dirs/coco_instance/test',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=False, scale=(
        640,
        640,
    ), type='Resize'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=20, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=10,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco_instances/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(keep_ratio=False, scale=(
                640,
                640,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='UdtiriDataset'),
    num_workers=40,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(keep_ratio=False, scale=(
        640,
        640,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco_instances/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                640,
                640,
            ), type='Resize'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='UdtiriDataset'),
    drop_last=False,
    num_workers=20,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco_instances/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric=[
        'segm',
    ],
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/mask-rcnn_r50_fpn_1x_coco'

2024/01/01 23:04:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/01/01 23:04:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/01/01 23:04:04 - mmengine - INFO - load model from: torchvision://resnet50
2024/01/01 23:04:04 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2024/01/01 23:04:04 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2024/01/01 23:04:04 - mmengine - INFO - Load checkpoint from /root/autodl-tmp/homework/configs/mask_rcnn/best_coco_segm_mAP_epoch_112.pth
2024/01/01 23:04:04 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/01/01 23:04:04 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/01/01 23:04:04 - mmengine - INFO - Checkpoints will be saved to /root/autodl-tmp/homework/work_dirs/mask-rcnn_r50_fpn_1x_coco.
2024/01/01 23:04:36 - mmengine - INFO - Epoch(train)  [1][50/60]  lr: 1.0000e-04  eta: 0:12:04  time: 0.6299  data_time: 0.2654  memory: 6954  grad_norm: 0.8465  loss: 0.0978  loss_rpn_cls: 0.0010  loss_rpn_bbox: 0.0034  loss_cls: 0.0116  acc: 99.4922  loss_bbox: 0.0267  loss_mask: 0.0551
2024/01/01 23:04:39 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:04:46 - mmengine - INFO - Epoch(val)  [1][ 50/100]    eta: 0:00:06  time: 0.1350  data_time: 0.1000  memory: 6878  
2024/01/01 23:04:47 - mmengine - INFO - Epoch(val)  [1][100/100]    eta: 0:00:00  time: 0.0260  data_time: 0.0013  memory: 742  
2024/01/01 23:04:47 - mmengine - INFO - Evaluating segm...
2024/01/01 23:04:47 - mmengine - INFO - segm_mAP_copypaste: 0.511 0.778 0.569 0.311 0.291 0.590
2024/01/01 23:04:47 - mmengine - INFO - Epoch(val) [1][100/100]    coco/segm_mAP: 0.5110  coco/segm_mAP_50: 0.7780  coco/segm_mAP_75: 0.5690  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2910  coco/segm_mAP_l: 0.5900  data_time: 0.0506  time: 0.0805
2024/01/01 23:04:48 - mmengine - INFO - The best checkpoint with 0.5110 coco/segm_mAP at 1 epoch is saved to best_coco_segm_mAP_epoch_1.pth.
2024/01/01 23:05:11 - mmengine - INFO - Epoch(train)  [2][50/60]  lr: 1.0000e-04  eta: 0:09:33  time: 0.4610  data_time: 0.0980  memory: 6813  grad_norm: 0.7515  loss: 0.0938  loss_rpn_cls: 0.0009  loss_rpn_bbox: 0.0029  loss_cls: 0.0114  acc: 99.5117  loss_bbox: 0.0243  loss_mask: 0.0543
2024/01/01 23:05:15 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:05:17 - mmengine - INFO - Epoch(val)  [2][ 50/100]    eta: 0:00:02  time: 0.0446  data_time: 0.0034  memory: 6980  
2024/01/01 23:05:19 - mmengine - INFO - Epoch(val)  [2][100/100]    eta: 0:00:00  time: 0.0338  data_time: 0.0016  memory: 710  
2024/01/01 23:05:19 - mmengine - INFO - Evaluating segm...
2024/01/01 23:05:19 - mmengine - INFO - segm_mAP_copypaste: 0.515 0.772 0.585 0.311 0.285 0.597
2024/01/01 23:05:19 - mmengine - INFO - Epoch(val) [2][100/100]    coco/segm_mAP: 0.5150  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2850  coco/segm_mAP_l: 0.5970  data_time: 0.0025  time: 0.0391
2024/01/01 23:05:19 - mmengine - INFO - The previous best checkpoint /root/autodl-tmp/homework/work_dirs/mask-rcnn_r50_fpn_1x_coco/best_coco_segm_mAP_epoch_1.pth is removed
2024/01/01 23:05:20 - mmengine - INFO - The best checkpoint with 0.5150 coco/segm_mAP at 2 epoch is saved to best_coco_segm_mAP_epoch_2.pth.
2024/01/01 23:05:44 - mmengine - INFO - Epoch(train)  [3][50/60]  lr: 1.0000e-04  eta: 0:08:33  time: 0.4611  data_time: 0.0904  memory: 7199  grad_norm: 0.7407  loss: 0.0929  loss_rpn_cls: 0.0008  loss_rpn_bbox: 0.0029  loss_cls: 0.0112  acc: 99.6289  loss_bbox: 0.0240  loss_mask: 0.0539
2024/01/01 23:05:47 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:05:49 - mmengine - INFO - Epoch(val)  [3][ 50/100]    eta: 0:00:01  time: 0.0397  data_time: 0.0024  memory: 6983  
2024/01/01 23:05:50 - mmengine - INFO - Epoch(val)  [3][100/100]    eta: 0:00:00  time: 0.0300  data_time: 0.0015  memory: 710  
2024/01/01 23:05:50 - mmengine - INFO - Evaluating segm...
2024/01/01 23:05:51 - mmengine - INFO - segm_mAP_copypaste: 0.512 0.772 0.583 0.311 0.284 0.592
2024/01/01 23:05:51 - mmengine - INFO - Epoch(val) [3][100/100]    coco/segm_mAP: 0.5120  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5830  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2840  coco/segm_mAP_l: 0.5920  data_time: 0.0020  time: 0.0348
2024/01/01 23:06:14 - mmengine - INFO - Epoch(train)  [4][50/60]  lr: 1.0000e-04  eta: 0:07:49  time: 0.4624  data_time: 0.0797  memory: 7136  grad_norm: 0.7297  loss: 0.0921  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0030  loss_cls: 0.0110  acc: 99.5117  loss_bbox: 0.0235  loss_mask: 0.0539
2024/01/01 23:06:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:06:19 - mmengine - INFO - Epoch(val)  [4][ 50/100]    eta: 0:00:01  time: 0.0351  data_time: 0.0020  memory: 6780  
2024/01/01 23:06:20 - mmengine - INFO - Epoch(val)  [4][100/100]    eta: 0:00:00  time: 0.0270  data_time: 0.0013  memory: 710  
2024/01/01 23:06:20 - mmengine - INFO - Evaluating segm...
2024/01/01 23:06:20 - mmengine - INFO - segm_mAP_copypaste: 0.510 0.772 0.585 0.311 0.285 0.591
2024/01/01 23:06:20 - mmengine - INFO - Epoch(val) [4][100/100]    coco/segm_mAP: 0.5100  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2850  coco/segm_mAP_l: 0.5910  data_time: 0.0016  time: 0.0310
2024/01/01 23:06:42 - mmengine - INFO - Epoch(train)  [5][50/60]  lr: 1.0000e-04  eta: 0:07:08  time: 0.4385  data_time: 0.0975  memory: 7399  grad_norm: 0.7269  loss: 0.0911  loss_rpn_cls: 0.0009  loss_rpn_bbox: 0.0027  loss_cls: 0.0111  acc: 99.5117  loss_bbox: 0.0230  loss_mask: 0.0533
2024/01/01 23:06:45 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:06:45 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/01/01 23:06:49 - mmengine - INFO - Epoch(val)  [5][ 50/100]    eta: 0:00:01  time: 0.0385  data_time: 0.0023  memory: 6754  
2024/01/01 23:06:50 - mmengine - INFO - Epoch(val)  [5][100/100]    eta: 0:00:00  time: 0.0280  data_time: 0.0014  memory: 710  
2024/01/01 23:06:50 - mmengine - INFO - Evaluating segm...
2024/01/01 23:06:51 - mmengine - INFO - segm_mAP_copypaste: 0.510 0.772 0.584 0.311 0.285 0.591
2024/01/01 23:06:51 - mmengine - INFO - Epoch(val) [5][100/100]    coco/segm_mAP: 0.5100  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5840  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2850  coco/segm_mAP_l: 0.5910  data_time: 0.0019  time: 0.0332
2024/01/01 23:07:13 - mmengine - INFO - Epoch(train)  [6][50/60]  lr: 1.0000e-04  eta: 0:06:34  time: 0.4565  data_time: 0.0792  memory: 7104  grad_norm: 0.7119  loss: 0.0894  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0027  loss_cls: 0.0108  acc: 99.6094  loss_bbox: 0.0222  loss_mask: 0.0530
2024/01/01 23:07:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:07:19 - mmengine - INFO - Epoch(val)  [6][ 50/100]    eta: 0:00:01  time: 0.0359  data_time: 0.0030  memory: 6826  
2024/01/01 23:07:20 - mmengine - INFO - Epoch(val)  [6][100/100]    eta: 0:00:00  time: 0.0292  data_time: 0.0015  memory: 742  
2024/01/01 23:07:20 - mmengine - INFO - Evaluating segm...
2024/01/01 23:07:20 - mmengine - INFO - segm_mAP_copypaste: 0.511 0.772 0.584 0.311 0.285 0.592
2024/01/01 23:07:20 - mmengine - INFO - Epoch(val) [6][100/100]    coco/segm_mAP: 0.5110  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5840  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2850  coco/segm_mAP_l: 0.5920  data_time: 0.0023  time: 0.0325
2024/01/01 23:07:42 - mmengine - INFO - Epoch(train)  [7][50/60]  lr: 1.0000e-04  eta: 0:06:02  time: 0.4402  data_time: 0.0795  memory: 6872  grad_norm: 0.7119  loss: 0.0896  loss_rpn_cls: 0.0009  loss_rpn_bbox: 0.0028  loss_cls: 0.0110  acc: 99.4922  loss_bbox: 0.0222  loss_mask: 0.0528
2024/01/01 23:07:46 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:07:47 - mmengine - INFO - Epoch(val)  [7][ 50/100]    eta: 0:00:01  time: 0.0349  data_time: 0.0024  memory: 6859  
2024/01/01 23:07:49 - mmengine - INFO - Epoch(val)  [7][100/100]    eta: 0:00:00  time: 0.0264  data_time: 0.0013  memory: 710  
2024/01/01 23:07:49 - mmengine - INFO - Evaluating segm...
2024/01/01 23:07:49 - mmengine - INFO - segm_mAP_copypaste: 0.512 0.772 0.585 0.311 0.287 0.593
2024/01/01 23:07:49 - mmengine - INFO - Epoch(val) [7][100/100]    coco/segm_mAP: 0.5120  coco/segm_mAP_50: 0.7720  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5930  data_time: 0.0019  time: 0.0307
2024/01/01 23:08:11 - mmengine - INFO - Epoch(train)  [8][50/60]  lr: 1.0000e-04  eta: 0:05:32  time: 0.4441  data_time: 0.0909  memory: 6980  grad_norm: 0.7029  loss: 0.0904  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0029  loss_cls: 0.0107  acc: 99.5898  loss_bbox: 0.0228  loss_mask: 0.0533
2024/01/01 23:08:15 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:08:16 - mmengine - INFO - Epoch(val)  [8][ 50/100]    eta: 0:00:01  time: 0.0348  data_time: 0.0028  memory: 6770  
2024/01/01 23:08:18 - mmengine - INFO - Epoch(val)  [8][100/100]    eta: 0:00:00  time: 0.0280  data_time: 0.0014  memory: 742  
2024/01/01 23:08:18 - mmengine - INFO - Evaluating segm...
2024/01/01 23:08:18 - mmengine - INFO - segm_mAP_copypaste: 0.515 0.773 0.585 0.311 0.287 0.595
2024/01/01 23:08:18 - mmengine - INFO - Epoch(val) [8][100/100]    coco/segm_mAP: 0.5150  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5950  data_time: 0.0021  time: 0.0313
2024/01/01 23:08:41 - mmengine - INFO - Epoch(train)  [9][50/60]  lr: 1.0000e-04  eta: 0:05:03  time: 0.4532  data_time: 0.0869  memory: 7042  grad_norm: 0.6849  loss: 0.0878  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0028  loss_cls: 0.0105  acc: 99.5703  loss_bbox: 0.0214  loss_mask: 0.0524
2024/01/01 23:08:44 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:08:46 - mmengine - INFO - Epoch(val)  [9][ 50/100]    eta: 0:00:01  time: 0.0359  data_time: 0.0023  memory: 7238  
2024/01/01 23:08:47 - mmengine - INFO - Epoch(val)  [9][100/100]    eta: 0:00:00  time: 0.0271  data_time: 0.0014  memory: 710  
2024/01/01 23:08:47 - mmengine - INFO - Evaluating segm...
2024/01/01 23:08:47 - mmengine - INFO - segm_mAP_copypaste: 0.515 0.773 0.585 0.311 0.287 0.594
2024/01/01 23:08:47 - mmengine - INFO - Epoch(val) [9][100/100]    coco/segm_mAP: 0.5150  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5940  data_time: 0.0019  time: 0.0315
2024/01/01 23:09:09 - mmengine - INFO - Epoch(train) [10][50/60]  lr: 1.0000e-04  eta: 0:04:34  time: 0.4431  data_time: 0.0876  memory: 6977  grad_norm: 0.7105  loss: 0.0887  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0028  loss_cls: 0.0103  acc: 99.3750  loss_bbox: 0.0216  loss_mask: 0.0532
2024/01/01 23:09:13 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:09:13 - mmengine - INFO - Saving checkpoint at 10 epochs
2024/01/01 23:09:17 - mmengine - INFO - Epoch(val) [10][ 50/100]    eta: 0:00:01  time: 0.0391  data_time: 0.0026  memory: 6973  
2024/01/01 23:09:18 - mmengine - INFO - Epoch(val) [10][100/100]    eta: 0:00:00  time: 0.0283  data_time: 0.0014  memory: 710  
2024/01/01 23:09:18 - mmengine - INFO - Evaluating segm...
2024/01/01 23:09:18 - mmengine - INFO - segm_mAP_copypaste: 0.515 0.773 0.585 0.284 0.287 0.596
2024/01/01 23:09:18 - mmengine - INFO - Epoch(val) [10][100/100]    coco/segm_mAP: 0.5150  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5960  data_time: 0.0020  time: 0.0337
2024/01/01 23:09:41 - mmengine - INFO - Epoch(train) [11][50/60]  lr: 1.0000e-04  eta: 0:04:07  time: 0.4619  data_time: 0.0904  memory: 7068  grad_norm: 0.6966  loss: 0.0872  loss_rpn_cls: 0.0006  loss_rpn_bbox: 0.0028  loss_cls: 0.0104  acc: 99.6289  loss_bbox: 0.0215  loss_mask: 0.0519
2024/01/01 23:09:45 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:09:47 - mmengine - INFO - Epoch(val) [11][ 50/100]    eta: 0:00:02  time: 0.0421  data_time: 0.0031  memory: 6921  
2024/01/01 23:09:49 - mmengine - INFO - Epoch(val) [11][100/100]    eta: 0:00:00  time: 0.0333  data_time: 0.0015  memory: 710  
2024/01/01 23:09:49 - mmengine - INFO - Evaluating segm...
2024/01/01 23:09:49 - mmengine - INFO - segm_mAP_copypaste: 0.516 0.773 0.586 0.311 0.287 0.596
2024/01/01 23:09:49 - mmengine - INFO - Epoch(val) [11][100/100]    coco/segm_mAP: 0.5160  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5960  data_time: 0.0023  time: 0.0376
2024/01/01 23:09:49 - mmengine - INFO - The previous best checkpoint /root/autodl-tmp/homework/work_dirs/mask-rcnn_r50_fpn_1x_coco/best_coco_segm_mAP_epoch_2.pth is removed
2024/01/01 23:09:50 - mmengine - INFO - The best checkpoint with 0.5160 coco/segm_mAP at 11 epoch is saved to best_coco_segm_mAP_epoch_11.pth.
2024/01/01 23:10:14 - mmengine - INFO - Epoch(train) [12][50/60]  lr: 1.0000e-04  eta: 0:03:39  time: 0.4323  data_time: 0.0795  memory: 6953  grad_norm: 0.6984  loss: 0.0871  loss_rpn_cls: 0.0006  loss_rpn_bbox: 0.0026  loss_cls: 0.0106  acc: 99.6484  loss_bbox: 0.0214  loss_mask: 0.0519
2024/01/01 23:10:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:10:19 - mmengine - INFO - Epoch(val) [12][ 50/100]    eta: 0:00:01  time: 0.0351  data_time: 0.0034  memory: 6894  
2024/01/01 23:10:20 - mmengine - INFO - Epoch(val) [12][100/100]    eta: 0:00:00  time: 0.0289  data_time: 0.0014  memory: 710  
2024/01/01 23:10:20 - mmengine - INFO - Evaluating segm...
2024/01/01 23:10:20 - mmengine - INFO - segm_mAP_copypaste: 0.516 0.773 0.587 0.311 0.290 0.595
2024/01/01 23:10:20 - mmengine - INFO - Epoch(val) [12][100/100]    coco/segm_mAP: 0.5160  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5870  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2900  coco/segm_mAP_l: 0.5950  data_time: 0.0024  time: 0.0320
2024/01/01 23:10:42 - mmengine - INFO - Epoch(train) [13][50/60]  lr: 1.0000e-04  eta: 0:03:11  time: 0.4359  data_time: 0.0953  memory: 6986  grad_norm: 0.6761  loss: 0.0857  loss_rpn_cls: 0.0008  loss_rpn_bbox: 0.0027  loss_cls: 0.0100  acc: 99.6484  loss_bbox: 0.0209  loss_mask: 0.0514
2024/01/01 23:10:46 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:10:47 - mmengine - INFO - Epoch(val) [13][ 50/100]    eta: 0:00:01  time: 0.0354  data_time: 0.0026  memory: 6996  
2024/01/01 23:10:49 - mmengine - INFO - Epoch(val) [13][100/100]    eta: 0:00:00  time: 0.0262  data_time: 0.0013  memory: 710  
2024/01/01 23:10:49 - mmengine - INFO - Evaluating segm...
2024/01/01 23:10:49 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.311 0.287 0.597
2024/01/01 23:10:49 - mmengine - INFO - Epoch(val) [13][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2870  coco/segm_mAP_l: 0.5970  data_time: 0.0020  time: 0.0308
2024/01/01 23:10:49 - mmengine - INFO - The previous best checkpoint /root/autodl-tmp/homework/work_dirs/mask-rcnn_r50_fpn_1x_coco/best_coco_segm_mAP_epoch_11.pth is removed
2024/01/01 23:10:50 - mmengine - INFO - The best checkpoint with 0.5170 coco/segm_mAP at 13 epoch is saved to best_coco_segm_mAP_epoch_13.pth.
2024/01/01 23:11:13 - mmengine - INFO - Epoch(train) [14][50/60]  lr: 1.0000e-04  eta: 0:02:43  time: 0.4403  data_time: 0.0826  memory: 7257  grad_norm: 0.6799  loss: 0.0866  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0026  loss_cls: 0.0103  acc: 99.4141  loss_bbox: 0.0214  loss_mask: 0.0516
2024/01/01 23:11:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:11:19 - mmengine - INFO - Epoch(val) [14][ 50/100]    eta: 0:00:01  time: 0.0358  data_time: 0.0024  memory: 7006  
2024/01/01 23:11:20 - mmengine - INFO - Epoch(val) [14][100/100]    eta: 0:00:00  time: 0.0266  data_time: 0.0013  memory: 710  
2024/01/01 23:11:20 - mmengine - INFO - Evaluating segm...
2024/01/01 23:11:20 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.311 0.288 0.596
2024/01/01 23:11:20 - mmengine - INFO - Epoch(val) [14][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.3110  coco/segm_mAP_m: 0.2880  coco/segm_mAP_l: 0.5960  data_time: 0.0018  time: 0.0311
2024/01/01 23:11:42 - mmengine - INFO - Epoch(train) [15][50/60]  lr: 1.0000e-04  eta: 0:02:17  time: 0.4446  data_time: 0.0927  memory: 7029  grad_norm: 0.6773  loss: 0.0875  loss_rpn_cls: 0.0008  loss_rpn_bbox: 0.0026  loss_cls: 0.0106  acc: 99.3750  loss_bbox: 0.0214  loss_mask: 0.0519
2024/01/01 23:11:46 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:11:46 - mmengine - INFO - Saving checkpoint at 15 epochs
2024/01/01 23:11:49 - mmengine - INFO - Epoch(val) [15][ 50/100]    eta: 0:00:01  time: 0.0377  data_time: 0.0024  memory: 6659  
2024/01/01 23:11:50 - mmengine - INFO - Epoch(val) [15][100/100]    eta: 0:00:00  time: 0.0269  data_time: 0.0014  memory: 710  
2024/01/01 23:11:50 - mmengine - INFO - Evaluating segm...
2024/01/01 23:11:50 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.284 0.289 0.596
2024/01/01 23:11:50 - mmengine - INFO - Epoch(val) [15][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0019  time: 0.0322
2024/01/01 23:12:12 - mmengine - INFO - Epoch(train) [16][50/60]  lr: 5.0000e-05  eta: 0:01:50  time: 0.4215  data_time: 0.0865  memory: 6917  grad_norm: 0.6597  loss: 0.0849  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0026  loss_cls: 0.0102  acc: 99.4531  loss_bbox: 0.0203  loss_mask: 0.0510
2024/01/01 23:12:15 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:12:17 - mmengine - INFO - Epoch(val) [16][ 50/100]    eta: 0:00:02  time: 0.0460  data_time: 0.0032  memory: 6868  
2024/01/01 23:12:19 - mmengine - INFO - Epoch(val) [16][100/100]    eta: 0:00:00  time: 0.0332  data_time: 0.0015  memory: 710  
2024/01/01 23:12:19 - mmengine - INFO - Evaluating segm...
2024/01/01 23:12:19 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.284 0.289 0.596
2024/01/01 23:12:19 - mmengine - INFO - Epoch(val) [16][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0024  time: 0.0395
2024/01/01 23:12:37 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:12:41 - mmengine - INFO - Epoch(train) [17][50/60]  lr: 5.0000e-05  eta: 0:01:23  time: 0.4322  data_time: 0.0843  memory: 7218  grad_norm: 0.6682  loss: 0.0858  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0026  loss_cls: 0.0100  acc: 99.5312  loss_bbox: 0.0209  loss_mask: 0.0515
2024/01/01 23:12:44 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:12:46 - mmengine - INFO - Epoch(val) [17][ 50/100]    eta: 0:00:01  time: 0.0367  data_time: 0.0029  memory: 6760  
2024/01/01 23:12:47 - mmengine - INFO - Epoch(val) [17][100/100]    eta: 0:00:00  time: 0.0307  data_time: 0.0015  memory: 710  
2024/01/01 23:12:47 - mmengine - INFO - Evaluating segm...
2024/01/01 23:12:47 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.284 0.289 0.596
2024/01/01 23:12:47 - mmengine - INFO - Epoch(val) [17][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0022  time: 0.0337
2024/01/01 23:13:09 - mmengine - INFO - Epoch(train) [18][50/60]  lr: 5.0000e-05  eta: 0:00:56  time: 0.4384  data_time: 0.0884  memory: 6943  grad_norm: 0.6607  loss: 0.0859  loss_rpn_cls: 0.0008  loss_rpn_bbox: 0.0025  loss_cls: 0.0105  acc: 99.4922  loss_bbox: 0.0207  loss_mask: 0.0513
2024/01/01 23:13:13 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:13:15 - mmengine - INFO - Epoch(val) [18][ 50/100]    eta: 0:00:01  time: 0.0373  data_time: 0.0021  memory: 6738  
2024/01/01 23:13:16 - mmengine - INFO - Epoch(val) [18][100/100]    eta: 0:00:00  time: 0.0270  data_time: 0.0013  memory: 710  
2024/01/01 23:13:16 - mmengine - INFO - Evaluating segm...
2024/01/01 23:13:16 - mmengine - INFO - segm_mAP_copypaste: 0.516 0.773 0.586 0.284 0.289 0.596
2024/01/01 23:13:16 - mmengine - INFO - Epoch(val) [18][100/100]    coco/segm_mAP: 0.5160  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0017  time: 0.0322
2024/01/01 23:13:37 - mmengine - INFO - Epoch(train) [19][50/60]  lr: 2.5000e-05  eta: 0:00:30  time: 0.4260  data_time: 0.0844  memory: 6911  grad_norm: 0.6628  loss: 0.0844  loss_rpn_cls: 0.0007  loss_rpn_bbox: 0.0025  loss_cls: 0.0099  acc: 99.5508  loss_bbox: 0.0202  loss_mask: 0.0510
2024/01/01 23:13:41 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:13:43 - mmengine - INFO - Epoch(val) [19][ 50/100]    eta: 0:00:02  time: 0.0456  data_time: 0.0030  memory: 7045  
2024/01/01 23:13:44 - mmengine - INFO - Epoch(val) [19][100/100]    eta: 0:00:00  time: 0.0294  data_time: 0.0014  memory: 710  
2024/01/01 23:13:44 - mmengine - INFO - Evaluating segm...
2024/01/01 23:13:45 - mmengine - INFO - segm_mAP_copypaste: 0.517 0.773 0.586 0.284 0.289 0.596
2024/01/01 23:13:45 - mmengine - INFO - Epoch(val) [19][100/100]    coco/segm_mAP: 0.5170  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5860  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0022  time: 0.0374
2024/01/01 23:14:07 - mmengine - INFO - Epoch(train) [20][50/60]  lr: 2.5000e-05  eta: 0:00:04  time: 0.4472  data_time: 0.0866  memory: 6973  grad_norm: 0.6577  loss: 0.0846  loss_rpn_cls: 0.0008  loss_rpn_bbox: 0.0025  loss_cls: 0.0102  acc: 99.7461  loss_bbox: 0.0204  loss_mask: 0.0508
2024/01/01 23:14:10 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_coco_20240101_230356
2024/01/01 23:14:10 - mmengine - INFO - Saving checkpoint at 20 epochs
2024/01/01 23:14:14 - mmengine - INFO - Epoch(val) [20][ 50/100]    eta: 0:00:01  time: 0.0383  data_time: 0.0022  memory: 7166  
2024/01/01 23:14:15 - mmengine - INFO - Epoch(val) [20][100/100]    eta: 0:00:00  time: 0.0279  data_time: 0.0014  memory: 710  
2024/01/01 23:14:15 - mmengine - INFO - Evaluating segm...
2024/01/01 23:14:15 - mmengine - INFO - segm_mAP_copypaste: 0.516 0.773 0.585 0.284 0.289 0.596
2024/01/01 23:14:15 - mmengine - INFO - Epoch(val) [20][100/100]    coco/segm_mAP: 0.5160  coco/segm_mAP_50: 0.7730  coco/segm_mAP_75: 0.5850  coco/segm_mAP_s: 0.2840  coco/segm_mAP_m: 0.2890  coco/segm_mAP_l: 0.5960  data_time: 0.0018  time: 0.0331
